""" try to make sourcing vimrc idempotent :source ~/.vimrc

" clear autocmds to avoid duplication
autocmd!

" to supress redefinition errors, below you'll see definitions like:
"
" function!
" command!


""" occasionally comes handy

" per-file vim settings (use with care)
"
"set modeline

"


""" visible tabs and trailing whitespace

" u00b7: middle dot: ·
" u2022: bullet: •
" u2500: box drawing single horizontal line: ─
" u2502: box drawing single vertical line: │

" use utf-8 to make them stand out
" one way to enter them is: <C-v>uNNNN
" where NNNN is the unicode code point
set encoding=utf-8
let &listchars = "tab:\u2022\u00b7,trail:\u00b7,nbsp:\u00b7"

" use ascii
"set listchars=tab:>-,trail:-

" :help 'fillchars'
let &fillchars = "diff:\u2500,vert:\u2502"


""" load plugins

" :set runtimepath?

" https://github.com/tpope/vim-pathogen
call pathogen#infect()

" plugin setup example (nerdcommenter)
"
" cd ~/.vim
" ln -s $HOME .home
"
" mkdir -p ~/src/github/scrooloose
" cd ~/src/github/scrooloose
" git clone https://github.com/scrooloose/nerdcommenter.git
" mkdir -p ~/.vim/bundle
" cd ~/.vim/bundle
" ln -s ../.home/src/github/scrooloose/nerdcommenter .
"
" After this pathogen should load nerdcommenter.
"
" You can enable/disable a plugin by removing/recreating the symlink.


""" configure plugins

" syntax color complex things like @{${"foo"}}
autocmd FileType perl let perl_extended_vars = 1

autocmd FileType python let python_highlight_all = 1
autocmd FileType python let python_highlight_space_errors = 0

" put python docstring in the comment highlighter category
" FIXME this overshoots, should handle "foo" and """foo""" differently
"hi def link pythonString Comment
"hi def link pythonUniString Comment

" make slime default to sending to the next window in the current screen
" http://unix.stackexchange.com/questions/20989
let b:slime_config = {"sessionname": $STY, "windowname": $WINDOW + 1}
let g:slime_paste_file = "$HOME/.slime_paste"


""" languages

" FIXME consider moving this to ~/.vim/ftplugin/

" Recognize .md files as markdown instead of modula2.
autocmd BufNewFile,BufRead *.md set filetype=markdown

" override the defaults if needed
autocmd FileType c set nolist
autocmd FileType cpp set nolist
autocmd FileType make set noexpandtab
autocmd FileType python set textwidth=79

filetype on
filetype plugin on
filetype indent on


""" functions

" I haven't found a usable python pretty printer.
" But we have the pep8 utility to do at least half of the work.
"" http://stackoverflow.com/questions/9466795
"" http://stackoverflow.com/questions/2575698
function! Pep8Filter()
    silent exe "%!pep8 /dev/stdin"
    if v:shell_error == 1
        let l:format_error = join( getline( line("'["), line("']") ), "\n" )
        echo l:format_error
    endif
    undo
endfunction

" filter the buffer through pretty printer, code beautifier
" keep cursor position as expressed in terms of line/column
function! PrettyPrint()

    " save position of cursor
    let s:save_cursor = getpos('.')

    " save position of window top
    normal! H
    let s:save_top = getpos('.')

    if exists("b:current_syntax")

        if b:current_syntax == 'perl'
            exe "%!perltidy" b:perltidy_options
        elseif b:current_syntax == 'python'
            call Pep8Filter()
        elseif b:current_syntax == 'c' || b:current_syntax == 'cpp'
            " FIXME when an error msg is printed to stderr
            "       it gets into the buffer, though it shouldn't
            " alternative: uncrustify
            %!indent
        elseif b:current_syntax == 'xml'
            " alternative: xmllint, tidy
            %!xmlstarlet format
        "elseif b:current_syntax == 'html'
        "    %!tidy --indent
        "elseif b:current_syntax == 'xhtml'
        "    %!tidy --indent
        elseif b:current_syntax == 'lisp'
            %!lispindent.lisp
        endif

    endif

    " restore saved position of window top
    call setpos('.', s:save_top)

    " restore saved position of cursor
    normal zt
    call setpos('.', s:save_cursor)

endfunction

" set project-specific variables based on the path of the project
" http://stackoverflow.com/questions/9202063
function! SetProjectVars()

    " help to comprehend expand("%:p:h")
    "
    "  % = current file name
    " :p = expand to full path
    " :h = head (last path component removed)
    "
    " see also: http://vimdoc.sf.net/htmldoc/eval.html#expand()

    " default options
    let b:perltidy_options = "--quiet"

    if match( expand("%:p:h"), "/project-foo/" ) >= 0
        let b:perltidy_options = b:perltidy_options
            \ . "--profile=$HOME/.perltidyrc-foo"
    elseif match( expand("%:p:h"), "/project-bar/" ) >= 0
        let b:perltidy_options = b:perltidy_options
            \ . "--profile=$HOME/.perltidyrc-bar"
    endif

endfunction

autocmd BufRead,BufNewFile * call SetProjectVars()

" call it even if filetype was not detected automatically,
" but set manually (:set ft=...)
autocmd FileType * call SetProjectVars()

function! ProgrammingFriendly()
    filetype detect
endfunction

function! CopyPasteFriendly()
    set nonumber
    set colorcolumn=
    set nolist
endfunction
