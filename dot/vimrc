""" try to make sourcing vimrc idempotent :source ~/.vimrc

" clear autocmds to avoid duplication
autocmd!

" exclamation mark forces the definition even if it is a re-definition
"
" function!
" command!


""" load plugins

" :set runtimepath?

" https://github.com/tpope/vim-pathogen
call pathogen#infect()

" plugin setup example (nerdcommenter)
"
" cd ~/.vim
" ln -s $HOME .home
"
" mkdir -p ~/src/github/scrooloose
" cd ~/src/github/scrooloose
" git clone https://github.com/scrooloose/nerdcommenter.git
" mkdir -p ~/.vim/bundle
" cd ~/.vim/bundle
" ln -s ../.home/src/github/scrooloose/nerdcommenter .
"
" After this pathogen should load nerdcommenter.
"
" You can enable/disable a plugin by removing/recreating the symlink.


""" configure plugins

autocmd FileType sh let g:is_bash = 1

" syntax color complex things like @{${"foo"}}
autocmd FileType perl let perl_extended_vars = 1

autocmd FileType python let python_highlight_all = 1
autocmd FileType python let python_highlight_space_errors = 0

" make slime default to sending to the next window in the current screen
" http://unix.stackexchange.com/questions/20989
let g:slime_paste_file = "~/var/lib/vim/slime/paste"
autocmd BufRead,BufNewFile *
    \ let b:slime_config = {"sessionname": $STY, "windowname": $WINDOW + 1}


""" functions

" I haven't found a usable python pretty printer.
" But we have the pep8 utility to do at least half of the work.
"" http://stackoverflow.com/questions/9466795
"" http://stackoverflow.com/questions/2575698
function! Pep8Filter()
    silent exe "%!pep8 /dev/stdin"
    if v:shell_error == 1
        let l:format_error = join( getline( line("'["), line("']") ), "\n" )
        echo l:format_error
    endif
    undo
endfunction

function! CursorPositionRestore()

    " restore saved position of window top
    call setpos('.', b:save_top)

    " restore saved position of cursor
    normal zt
    call setpos('.', b:save_cursor)

endfunction

function! CursorPositionSave()

    " save position of cursor
    let b:save_cursor = getpos('.')

    " save position of window top
    normal! H
    let b:save_top = getpos('.')

    call CursorPositionRestore()

endfunction

" filter the buffer through pretty printer, code beautifier
" keep cursor position as expressed in terms of line/column
function! PrettyPrint()

    call CursorPositionSave()

    if exists("b:current_syntax")

        if b:current_syntax == 'perl'
            exe "%!perltidy" b:perltidy_options
        elseif b:current_syntax == 'python'
            call Pep8Filter()
        elseif b:current_syntax == 'c' || b:current_syntax == 'cpp'
            " FIXME when an error msg is printed to stderr
            "       it gets into the buffer, though it shouldn't
            " alternative: uncrustify
            %!indent
        elseif b:current_syntax == 'xml'
            " alternative: xmllint, tidy
            %!xmlstarlet format
        "elseif b:current_syntax == 'html'
        "    %!tidy --indent
        "elseif b:current_syntax == 'xhtml'
        "    %!tidy --indent
        elseif b:current_syntax == 'lisp'
            %!lispindent.lisp
        elseif b:current_syntax == 'clojure'
            " XXX this is paragraph-only
            normal =ip
        endif

    endif

    call CursorPositionRestore()

endfunction

" set project-specific variables based on the path of the project
" http://stackoverflow.com/questions/9202063
function! SetProjectVars()

    " help to comprehend expand("%:p:h")
    "
    "  % = current file name
    " :p = expand to full path
    " :h = head (last path component removed)
    "
    " see also: http://vimdoc.sf.net/htmldoc/eval.html#expand()

    " default options
    let b:perltidy_options = "--quiet"

    if match( expand("%:p:h"), "/project-foo/" ) >= 0
        let b:perltidy_options = b:perltidy_options
            \ . "--profile=$HOME/.perltidyrc-foo"
    elseif match( expand("%:p:h"), "/project-bar/" ) >= 0
        let b:perltidy_options = b:perltidy_options
            \ . "--profile=$HOME/.perltidyrc-bar"
    endif

endfunction

autocmd BufRead,BufNewFile * call SetProjectVars()

" call it even if filetype was not detected automatically,
" but set manually (:set ft=...)
autocmd FileType * call SetProjectVars()

function! ProgrammingFriendly()
    filetype detect
endfunction

function! CopyPasteFriendly()
    set nonumber
    set colorcolumn=
    set nolist
endfunction

runtime lib/color.vim
runtime lib/dir.vim
runtime lib/filetype.vim
runtime lib/gui.vim
runtime lib/map.vim
runtime lib/set.vim
runtime lib/unicode.vim
